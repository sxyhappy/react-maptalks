(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[946],{5318:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return y}});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=s(n),y=a,d=m["".concat(l,".").concat(y)]||m[y]||u[y]||o;return n?r.createElement(d,c(c({ref:t},p),{},{components:n})):r.createElement(d,c({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1651:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return u}});var r=n(9603),a=n(120),o=(n(7378),n(5318)),c=["components"],i={sidebar_label:"ParticleLayer",sidebar_position:5},l={unversionedId:"components/layers/particle-layer",id:"components/layers/particle-layer",isDocsHomePage:!1,title:"ParticleLayer",description:"Example",source:"@site/docs/components/layers/particle-layer.mdx",sourceDirName:"components/layers",slug:"/components/layers/particle-layer",permalink:"/react-maptalks/docs/components/layers/particle-layer",editUrl:"https://github.com/sxyhappy/react-maptalks/blob/master/docs/docs/components/layers/particle-layer.mdx",version:"current",sidebar_label:"ParticleLayer",sidebarPosition:5,frontMatter:{sidebar_label:"ParticleLayer",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"CanvasLayer",permalink:"/react-maptalks/docs/components/layers/canvas-layer"},next:{title:"MtWmsLayer",permalink:"/react-maptalks/docs/components/layers/wms-tile-layer"}},s=[{value:"Example",id:"example",children:[]}],p={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live=true",live:"true"},"function ParticleExample() {\n  const mapRef = useRef();\n  const view = { center: [-0.113049,51.49856], pitch: 0, zoom: 14 };\n  const [visible, setVisible] = useState(true);\n\n  const handleLayerReady = layer => {\n    const center = mapRef.current.getCenter();\n    const radius = 1000;\n    layer.getParticles = function (t) {\n      const point = mapRef.current.coordinateToContainerPoint(center);\n      const angle = (t / 16 % 360) * Math.PI / 180;\n      const pxLen = mapRef.current.distanceToPixel(radius, radius);\n      const r = pxLen.width;\n      const x = r * Math.cos(angle), y = r * Math.sin(angle);\n      return [\n        {\n          point : point.add(x, y),\n          r : 4,\n          color : 'rgb(135,196,240)'\n        }\n      ];\n    };\n  }\n\n  return (\n    <>\n      <button onClick={() => setVisible(!visible)}>change visible</button>\n      <MtMap {...view} ref={mapRef} style={{height: 400}}>\n        <MtTileLayer\n          id={\"base\"}\n          urlTemplate=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\"\n          subdomains={['a','b','c','d']}\n          attribution={'&copy; <a href=\"http://osm.org\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/\">CARTO</a>'}\n        />\n\n        <MtParticleLayer id={'particleLayer'} onReady={handleLayerReady} visible={visible} />\n      </MtMap>\n    </>\n  )\n}\n\n")))}u.isMDXComponent=!0}}]);