(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[56],{3458:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return m}});var t=a(7560),r=a(8283),s=(a(2784),a(876)),o=["components"],i={sidebar_label:"CanvasLayer",sidebar_position:4},c={unversionedId:"components/canvas-layer",id:"components/canvas-layer",isDocsHomePage:!1,title:"CanvasLayer",description:"Example",source:"@site/docs/components/canvas-layer.mdx",sourceDirName:"components",slug:"/components/canvas-layer",permalink:"/react-maptalks/docs/components/canvas-layer",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/components/canvas-layer.mdx",version:"current",sidebar_label:"CanvasLayer",sidebarPosition:4,frontMatter:{sidebar_label:"CanvasLayer",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"MtWmsLayer",permalink:"/react-maptalks/docs/components/vector-layer"}},l=[{value:"Example",id:"example",children:[]}],p={toc:l};function m(e){var n=e.components,a=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live=true",live:"true"},"\nfunction CanvasExample() {\n  const mapRef = useRef();\n  const view = { center: [-0.113049,51.49856], pitch: 0, zoom: 14 };\n  const [visible, setVisible] = useState(true);\n\n  const handleLayerReady = layer => {\n    layer.prepareToDraw = function () {\n      return ['foo', 'bar'];\n    };\n\n    layer.draw = function (context, view, param1, param2) {\n      const size = mapRef.current.getSize();\n      const str = param1 + ',' + param2;\n      context.fillStyle = '#f00';\n      context.font = 'bolder 50px sans-serif';\n      const len = context.measureText(str);\n      context.fillText(str, size.width / 2 - len.width / 2, size.height / 2);\n      this.completeRender();\n    };\n\n    layer.drawOnInteracting = function (context, view, param1, param2) {\n      this.draw(context, view, param1, param2);\n    };\n  }\n\n  return (\n    <div style={{height: 400}}>\n      <button onClick={() => setVisible(!visible)}>change visible</button>\n      <MtMap {...view} ref={mapRef}>\n        <MtTileLayer\n          id={\"base\"}\n          urlTemplate=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\"\n          subdomains={['a','b','c','d']}\n          attribution={'&copy; <a href=\"http://osm.org\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/\">CARTO</a>'}\n        />\n\n        <MtCanvasLayer onReady={handleLayerReady} id={'canvas'} visible={visible} />\n      </MtMap>\n    </div>\n  )\n}\n\n")))}m.isMDXComponent=!0}}]);